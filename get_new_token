#!/usr/bin/env python3
# coding: utf8

"""
get_new_token: Obtains a new authentication token
"""

import os
import sys
import hashlib
import Ice

Ice.loadSlice(
    f"{os.path.dirname(os.path.realpath(__file__))}/assignment/icegauntlet.ice"
)

# pylint: disable=E0401
# pylint: disable=C0413
import IceGauntlet

PASSWORD_SALT = """
Our hard work by these
words guarded please donâ€™t steal
(c)Apple Computer Inc
""".strip()


class Client(Ice.Application):
    """
    Authentication client
    """

    @staticmethod
    def _calculate_hash(password: str) -> str:
        """
        Calculates the hash for the provided password
        :param password Password for which the hash will be calculated for
        :return The hash calculated for this password
        """
        if password is None:
            return None
        password_hash = hashlib.sha256()
        password_hash.update(PASSWORD_SALT.encode("utf8"))
        password_hash.update(password.encode("utf8"))
        return password_hash.hexdigest()

    def run(self, args: list) -> int:
        """
        Client entry point
        :param args An argument list containing the communicator initialization parameters
        :return An exit code to the operating system
        """
        [user, password, proxy] = args[1:]
        auth_proxy = self.communicator().stringToProxy(proxy)

        auth = IceGauntlet.AuthenticationPrx.checkedCast(auth_proxy)
        if not auth:
            raise RuntimeError("invalid authentication proxy")

        try:
            print(auth.getNewToken(user, self._calculate_hash(password)))
        except IceGauntlet.Unauthorized:
            print("error: unauthorized", file=sys.stderr)
            return 1

        return 0

if __name__ == "__main__":
    app = Client()
    sys.exit(app.main(sys.argv))